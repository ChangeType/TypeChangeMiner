plugins {
    id "me.champeau.gradle.jmh" version "0.5.0"
}

uploadArchives.enabled = false
jar.enabled = false

task checkActions(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.github.gumtree.dist.ActionsCollector'
    args 'check'
}

task collectActions(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.github.gumtree.dist.ActionsCollector'
    args 'collect'
}

if (project.hasProperty('trees')) {
    task collectTrees(type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        main = 'com.github.gumtree.dist.BenchmarkCollector'
        args trees
    }
}

def getGitHash = { ->
  try {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--dirty=+', '--tags'
      standardOutput = stdout
    }
    return stdout.toString().trim()
  } catch (all) {
    return '0000000'
  }
}

jmh {
    fork = 0
    warmupIterations = 1
    iterations = 2
    benchmarkMode = ['AverageTime']
    benchmarkParameters = [
      'refPath' : new File("${project.projectDir}/src/jmh/resources/").listFiles()
        .collect { it.getAbsolutePath() }
        .findAll { it.matches(".*_v0_.*") }
    ]
    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human_${new Date().getTime()}_${getGitHash()}.txt")
    resultsFile = project.file("${project.buildDir}/reports/jmh/results_${new Date().getTime()}_${getGitHash()}.csv")
    resultFormat = 'CSV'
}

task jmhPlot(type: Exec, dependsOn: 'jmh') {
    commandLine "R", "-f", "${project.projectDir}/src/main/r/plotBenchmark.R", "${project.buildDir}/reports/jmh/"
}

dependencies {
    implementation project(':client')
    implementation project(':client.diff')
    implementation project(':gen.antlr3')
    implementation project(':gen.antlr3-antlr')
    implementation project(':gen.antlr3-json')
    implementation project(':gen.antlr3-php')
    implementation project(':gen.antlr3-r')
    implementation project(':gen.antlr3-xml')
    implementation project(':gen.c')
    implementation project(':gen.jdt')
    implementation project(':gen.js')
    implementation project(':gen.ruby')
}
